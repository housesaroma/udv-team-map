import { API_USERS, USE_MOCK_DATA } from "../constants/apiConstants";
import { MOCK_USERS_RESPONSE } from "../constants/mockUsersProfile";
import type { ApiUserProfile, User } from "../types";
import { departmentColors } from "../utils/departmentUtils";

// –¢–∏–ø—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
export interface UsersResponse {
    amountOfUsers: number;
    usersTable: ApiUserProfile[];
    isCached: boolean;
    currentPage: number;
    totalPages: number;
    pageSize: number;
}

// –¢–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
export interface UsersQueryParams {
    page: number;
    limit: number;
    sort?: string;
    positionFilter?: string;
    departmentFilter?: string;
    isCached?: boolean;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ApiUserProfile –≤ User
const transformApiUserToUser = (apiUser: ApiUserProfile): User => {
    const nameParts = apiUser.userName.split(" ");

    const departmentName = apiUser.department.toLowerCase();
    const departmentColor = departmentColors[departmentName] || "#6B7280";

    return {
        id: apiUser.userId,
        firstName: nameParts[1] || "", // –ò–º—è
        lastName: nameParts[0] || "", // –§–∞–º–∏–ª–∏—è
        middleName: nameParts[2] || "", // –û—Ç—á–µ—Å—Ç–≤–æ
        position: apiUser.position,
        department: {
            id: departmentName,
            name: apiUser.department,
            color: departmentColor,
        },
        avatar: apiUser.avatar,
        phone: apiUser.phoneNumber,
        city: apiUser.city,
        interests: apiUser.interests,
        birthDate: apiUser.bornDate,
        hireDate: apiUser.workExperience,
        messengerLink:
            apiUser.contacts?.telegram?.[0] || apiUser.contacts?.skype?.[0],
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è query string
const buildQueryString = (params: UsersQueryParams): string => {
    const queryParams = new URLSearchParams();

    queryParams.append("page", params.page.toString());
    queryParams.append("limit", params.limit.toString());

    if (params.sort) queryParams.append("sort", params.sort);
    if (params.positionFilter)
        queryParams.append("positionFilter", params.positionFilter);
    if (params.departmentFilter)
        queryParams.append("departmentFilter", params.departmentFilter);
    if (params.isCached !== undefined)
        queryParams.append("isCached", params.isCached.toString());

    return queryParams.toString();
};

export const adminService = {
    async getUsers(params: UsersQueryParams): Promise<UsersResponse> {
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö —Å—Ä–∞–∑—É
        if (USE_MOCK_DATA) {
            console.log("üìÅ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            return MOCK_USERS_RESPONSE;
        }

        // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å –±—ç–∫–µ–Ω–¥–∞
        console.log("üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±—ç–∫–µ–Ω–¥–∞...", params);
        try {
            const queryString = buildQueryString(params);
            const url = `${API_USERS}?${queryString}`;

            console.log("üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å url:", url);

            const response = await fetch(url);

            if (!response.ok) {
                throw new Error(
                    `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.status}`
                );
            }

            const data: UsersResponse = await response.json();
            return data;
        } catch (error) {
            console.error(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –±—ç–∫–µ–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ:",
                error
            );
            return MOCK_USERS_RESPONSE;
        }
    },

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ User (—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–º)
    async getUsersTransformed(params: UsersQueryParams): Promise<{
        users: User[];
        totalRecords: number;
        currentPage: number;
        totalPages: number;
        pageSize: number;
        isCached: boolean;
    }> {
        const response = await this.getUsers(params);
        const transformedUsers = response.usersTable.map(
            transformApiUserToUser
        );

        return {
            users: transformedUsers,
            totalRecords: response.amountOfUsers,
            currentPage: response.currentPage,
            totalPages: response.totalPages,
            pageSize: response.pageSize,
            isCached: response.isCached,
        };
    },

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    isUsingMockData(): boolean {
        return USE_MOCK_DATA;
    },
};
