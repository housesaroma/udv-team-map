import type {
  EmployeeNode,
  OrganizationHierarchy,
} from "../types/organization";
import { API_HIERARCHY, USE_MOCK_DATA } from "../constants/apiConstants";
import { MOCK_HIERARCHY } from "../constants/mockUsersHierarchy";

export const organizationService = {
  async getOrganizationHierarchy(): Promise<OrganizationHierarchy> {
    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö —Å—Ä–∞–∑—É
    if (USE_MOCK_DATA) {
      console.log("üìÅ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã");
      return this.enrichWithDepartments(MOCK_HIERARCHY);
    }

    // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å –±—ç–∫–µ–Ω–¥–∞
    console.log("üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–µ–Ω–¥–∞...");
    try {
      const response = await fetch(API_HIERARCHY);

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏: ${response.status}`);
      }

      const data: OrganizationHierarchy = await response.json();
      return this.enrichWithDepartments(data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –±—ç–∫–µ–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ:", error);
      return this.enrichWithDepartments(MOCK_HIERARCHY);
    }
  },

  enrichWithDepartments(data: OrganizationHierarchy): OrganizationHierarchy {
    // –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const enrichedData = structuredClone(data);

    // –î–æ–±–∞–≤–ª—è–µ–º CEO –≤ IT –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    enrichedData.ceo.department = "IT";

    // –û–±–æ–≥–∞—â–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö
    for (const dept of enrichedData.departments) {
      const assignDepartment = (employee: EmployeeNode) => {
        employee.department = dept.department;
        for (const subordinate of employee.subordinates) {
          assignDepartment(subordinate);
        }
      };

      for (const employee of dept.employees) {
        assignDepartment(employee);
      }
    }

    return enrichedData;
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  isUsingMockData(): boolean {
    return USE_MOCK_DATA;
  },
};
